
dist/Debug/production/attinyFullTest.X.production.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00803800  00803800  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000319f  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b6c  00000000  00000000  00003c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086c  00000000  00000000  00005793  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00006000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011f6  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000372  00000000  00000000  000073e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00007754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_8>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_13>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  6c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  70:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_copy_data>:
  84:	18 e3       	ldi	r17, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	ee ed       	ldi	r30, 0xDE	; 222
  8c:	f8 e0       	ldi	r31, 0x08	; 8
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	28 e3       	ldi	r18, 0x38	; 56
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b8 e3       	ldi	r27, 0x38	; 56
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ab 30       	cpi	r26, 0x0B	; 11
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <main>
  ae:	0c 94 6d 04 	jmp	0x8da	; 0x8da <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <but_getStates>:
uint8_t buttons[4];
uint8_t butFilterCnt = 0;
uint8_t buttonStatesNew = 0;
uint8_t buttonStates = 0;

uint8_t but_getStates() {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
    return buttonStates;
  be:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <buttonStates>
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <but_updateStates>:
 * filter:
 * if buttons[x] value is '0000 0000' it counts as released
 * if buttons[x] value is '1111 1111' it counts as pressed
 * anything in between doesn't change the former state
 */
void but_updateStates() {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
    if (BIT_CHECK(BU0_PT.IN, BU0_BP))
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	94 e0       	ldi	r25, 0x04	; 4
  d4:	fc 01       	movw	r30, r24
  d6:	80 85       	ldd	r24, Z+8	; 0x08
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 70       	andi	r24, 0x08	; 8
  de:	99 27       	eor	r25, r25
  e0:	89 2b       	or	r24, r25
  e2:	99 f0       	breq	.+38     	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
        BIT_CLEAR(buttons[0], butFilterCnt);
  e4:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttons>
  e8:	48 2f       	mov	r20, r24
  ea:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <but_updateStates+0x34>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	2a 95       	dec	r18
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <but_updateStates+0x30>
 100:	80 95       	com	r24
 102:	84 23       	and	r24, r20
 104:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttons>
 108:	11 c0       	rjmp	.+34     	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
    else
        BIT_SET(buttons[0], butFilterCnt);
 10a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttons>
 10e:	48 2f       	mov	r20, r24
 110:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	2a 95       	dec	r18
 124:	e2 f7       	brpl	.-8      	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
 126:	84 2b       	or	r24, r20
 128:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttons>

    if (buttons[0] == STATE_BUT_RELEASED)
 12c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttons>
 130:	88 23       	and	r24, r24
 132:	31 f4       	brne	.+12     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
        BIT_CLEAR(buttonStatesNew, BU0_STAT_BP);
 134:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
 13e:	09 c0       	rjmp	.+18     	; 0x152 <__EEPROM_REGION_LENGTH__+0x52>
    else {
        if (buttons[0] == STATE_BUT_PRESSED)
 140:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttons>
 144:	8f 3f       	cpi	r24, 0xFF	; 255
 146:	29 f4       	brne	.+10     	; 0x152 <__EEPROM_REGION_LENGTH__+0x52>
            BIT_SET(buttonStatesNew, BU0_STAT_BP);
 148:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
    }


    if (BIT_CHECK(BU1_PT.IN, BU1_BP)) {
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	94 e0       	ldi	r25, 0x04	; 4
 156:	fc 01       	movw	r30, r24
 158:	80 85       	ldd	r24, Z+8	; 0x08
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 71       	andi	r24, 0x10	; 16
 160:	99 27       	eor	r25, r25
 162:	89 2b       	or	r24, r25
 164:	99 f0       	breq	.+38     	; 0x18c <__EEPROM_REGION_LENGTH__+0x8c>
        BIT_CLEAR(buttons[1], butFilterCnt);
 166:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttons+0x1>
 16a:	48 2f       	mov	r20, r24
 16c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <__EEPROM_REGION_LENGTH__+0x7e>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	2a 95       	dec	r18
 180:	e2 f7       	brpl	.-8      	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttons+0x1>
 18a:	11 c0       	rjmp	.+34     	; 0x1ae <__EEPROM_REGION_LENGTH__+0xae>
    } else {
        BIT_SET(buttons[1], butFilterCnt);
 18c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttons+0x1>
 190:	48 2f       	mov	r20, r24
 192:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__EEPROM_REGION_LENGTH__+0xa4>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	2a 95       	dec	r18
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <__EEPROM_REGION_LENGTH__+0xa0>
 1a8:	84 2b       	or	r24, r20
 1aa:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttons+0x1>
    }
    if (buttons[1] == STATE_BUT_RELEASED) {
 1ae:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttons+0x1>
 1b2:	88 23       	and	r24, r24
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <__EEPROM_REGION_LENGTH__+0xc2>
        BIT_CLEAR(buttonStatesNew, BU1_STAT_BP);
 1b6:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 1ba:	8d 7f       	andi	r24, 0xFD	; 253
 1bc:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <__EEPROM_REGION_LENGTH__+0xd4>
    } else
        if (buttons[1] == STATE_BUT_PRESSED) {
 1c2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttons+0x1>
 1c6:	8f 3f       	cpi	r24, 0xFF	; 255
 1c8:	29 f4       	brne	.+10     	; 0x1d4 <__EEPROM_REGION_LENGTH__+0xd4>
        BIT_SET(buttonStatesNew, BU1_STAT_BP);
 1ca:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
    }

    if (BIT_CHECK(BU2_PT.IN, BU2_BP)) {
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	94 e0       	ldi	r25, 0x04	; 4
 1d8:	fc 01       	movw	r30, r24
 1da:	80 85       	ldd	r24, Z+8	; 0x08
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	81 70       	andi	r24, 0x01	; 1
 1e2:	99 27       	eor	r25, r25
 1e4:	89 2b       	or	r24, r25
 1e6:	99 f0       	breq	.+38     	; 0x20e <__EEPROM_REGION_LENGTH__+0x10e>
        BIT_CLEAR(buttons[2], butFilterCnt);
 1e8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttons+0x2>
 1ec:	48 2f       	mov	r20, r24
 1ee:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__EEPROM_REGION_LENGTH__+0x100>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	2a 95       	dec	r18
 202:	e2 f7       	brpl	.-8      	; 0x1fc <__EEPROM_REGION_LENGTH__+0xfc>
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <buttons+0x2>
 20c:	11 c0       	rjmp	.+34     	; 0x230 <__EEPROM_REGION_LENGTH__+0x130>
    } else {
        BIT_SET(buttons[2], butFilterCnt);
 20e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttons+0x2>
 212:	48 2f       	mov	r20, r24
 214:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <__EEPROM_REGION_LENGTH__+0x126>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	2a 95       	dec	r18
 228:	e2 f7       	brpl	.-8      	; 0x222 <__EEPROM_REGION_LENGTH__+0x122>
 22a:	84 2b       	or	r24, r20
 22c:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <buttons+0x2>
    }
    if (buttons[2] == STATE_BUT_RELEASED) {
 230:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttons+0x2>
 234:	88 23       	and	r24, r24
 236:	31 f4       	brne	.+12     	; 0x244 <__EEPROM_REGION_LENGTH__+0x144>
        BIT_CLEAR(buttonStatesNew, BU2_STAT_BP);
 238:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
 242:	09 c0       	rjmp	.+18     	; 0x256 <__EEPROM_REGION_LENGTH__+0x156>
    } else
        if (buttons[2] == STATE_BUT_PRESSED) {
 244:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttons+0x2>
 248:	8f 3f       	cpi	r24, 0xFF	; 255
 24a:	29 f4       	brne	.+10     	; 0x256 <__EEPROM_REGION_LENGTH__+0x156>
        BIT_SET(buttonStatesNew, BU2_STAT_BP);
 24c:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 250:	84 60       	ori	r24, 0x04	; 4
 252:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
    }

    if (BIT_CHECK(BU3_PT.IN, BU3_BP)) {
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	94 e0       	ldi	r25, 0x04	; 4
 25a:	fc 01       	movw	r30, r24
 25c:	80 85       	ldd	r24, Z+8	; 0x08
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	80 71       	andi	r24, 0x10	; 16
 264:	99 27       	eor	r25, r25
 266:	89 2b       	or	r24, r25
 268:	99 f0       	breq	.+38     	; 0x290 <__EEPROM_REGION_LENGTH__+0x190>
        BIT_CLEAR(buttons[3], butFilterCnt);
 26a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <buttons+0x3>
 26e:	48 2f       	mov	r20, r24
 270:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__EEPROM_REGION_LENGTH__+0x182>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	2a 95       	dec	r18
 284:	e2 f7       	brpl	.-8      	; 0x27e <__EEPROM_REGION_LENGTH__+0x17e>
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <buttons+0x3>
 28e:	11 c0       	rjmp	.+34     	; 0x2b2 <__EEPROM_REGION_LENGTH__+0x1b2>
    } else {
        BIT_SET(buttons[3], butFilterCnt);
 290:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <buttons+0x3>
 294:	48 2f       	mov	r20, r24
 296:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	2a 95       	dec	r18
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 2ac:	84 2b       	or	r24, r20
 2ae:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <buttons+0x3>
    }
    if (buttons[3] == STATE_BUT_RELEASED) {
 2b2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <buttons+0x3>
 2b6:	88 23       	and	r24, r24
 2b8:	31 f4       	brne	.+12     	; 0x2c6 <__EEPROM_REGION_LENGTH__+0x1c6>
        BIT_CLEAR(buttonStatesNew, BU3_STAT_BP);
 2ba:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 2be:	87 7f       	andi	r24, 0xF7	; 247
 2c0:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <__EEPROM_REGION_LENGTH__+0x1d8>
    } else
        if (buttons[3] == STATE_BUT_PRESSED) {
 2c6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <buttons+0x3>
 2ca:	8f 3f       	cpi	r24, 0xFF	; 255
 2cc:	29 f4       	brne	.+10     	; 0x2d8 <__EEPROM_REGION_LENGTH__+0x1d8>
        BIT_SET(buttonStatesNew, BU3_STAT_BP);
 2ce:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <buttonStatesNew>
    }
    butFilterCnt = (butFilterCnt + 1)&0b111;
 2d8:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	87 70       	andi	r24, 0x07	; 7
 2e0:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
    cli();
 2e4:	f8 94       	cli
    buttonStates = buttonStatesNew;
 2e6:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <buttonStatesNew>
 2ea:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <buttonStates>
    sei();
 2ee:	78 94       	sei

}
 2f0:	00 00       	nop
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <but_init>:

void but_init() {
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	60 97       	sbiw	r28, 0x10	; 16
 302:	cd bf       	out	0x3d, r28	; 61
 304:	de bf       	out	0x3e, r29	; 62
    for (int i = 0; i < 4; i++) {
 306:	19 82       	std	Y+1, r1	; 0x01
 308:	1a 82       	std	Y+2, r1	; 0x02
 30a:	0b c0       	rjmp	.+22     	; 0x322 <but_init+0x2a>
        buttons[i] = STATE_BUT_RELEASED;
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	9a 81       	ldd	r25, Y+2	; 0x02
 310:	89 5f       	subi	r24, 0xF9	; 249
 312:	97 4c       	sbci	r25, 0xC7	; 199
 314:	fc 01       	movw	r30, r24
 316:	10 82       	st	Z, r1
    sei();

}

void but_init() {
    for (int i = 0; i < 4; i++) {
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	9a 83       	std	Y+2, r25	; 0x02
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	9a 81       	ldd	r25, Y+2	; 0x02
 326:	04 97       	sbiw	r24, 0x04	; 4
 328:	8c f3       	brlt	.-30     	; 0x30c <but_init+0x14>
        buttons[i] = STATE_BUT_RELEASED;
    }

    BITMASK_CLEAR(BU0_PT.DIR, BU0_BM);
 32a:	80 e4       	ldi	r24, 0x40	; 64
 32c:	94 e0       	ldi	r25, 0x04	; 4
 32e:	20 e4       	ldi	r18, 0x40	; 64
 330:	34 e0       	ldi	r19, 0x04	; 4
 332:	f9 01       	movw	r30, r18
 334:	20 81       	ld	r18, Z
 336:	27 7f       	andi	r18, 0xF7	; 247
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
    BIT_SET(BU0_PT.PIN3CTRL, PORT_PULLUPEN_bp); //BUtton0 PC3
 33c:	80 e4       	ldi	r24, 0x40	; 64
 33e:	94 e0       	ldi	r25, 0x04	; 4
 340:	20 e4       	ldi	r18, 0x40	; 64
 342:	34 e0       	ldi	r19, 0x04	; 4
 344:	f9 01       	movw	r30, r18
 346:	23 89       	ldd	r18, Z+19	; 0x13
 348:	28 60       	ori	r18, 0x08	; 8
 34a:	fc 01       	movw	r30, r24
 34c:	23 8b       	std	Z+19, r18	; 0x13
    BITMASK_CLEAR(BU1_PT.DIR, PIN4_bm);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	94 e0       	ldi	r25, 0x04	; 4
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	34 e0       	ldi	r19, 0x04	; 4
 356:	f9 01       	movw	r30, r18
 358:	20 81       	ld	r18, Z
 35a:	2f 7e       	andi	r18, 0xEF	; 239
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
    BIT_SET(BU1_PT.PIN4CTRL, PORT_PULLUPEN_bp); //Button1 PA4
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	94 e0       	ldi	r25, 0x04	; 4
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	34 e0       	ldi	r19, 0x04	; 4
 368:	f9 01       	movw	r30, r18
 36a:	24 89       	ldd	r18, Z+20	; 0x14
 36c:	28 60       	ori	r18, 0x08	; 8
 36e:	fc 01       	movw	r30, r24
 370:	24 8b       	std	Z+20, r18	; 0x14
    BITMASK_CLEAR(BU2_PT.DIR, BU2_BM);
 372:	80 e4       	ldi	r24, 0x40	; 64
 374:	94 e0       	ldi	r25, 0x04	; 4
 376:	20 e4       	ldi	r18, 0x40	; 64
 378:	34 e0       	ldi	r19, 0x04	; 4
 37a:	f9 01       	movw	r30, r18
 37c:	20 81       	ld	r18, Z
 37e:	2e 7f       	andi	r18, 0xFE	; 254
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18
    BIT_SET(BU2_PT.PIN0CTRL, PORT_PULLUPEN_bp); //Button2 PC0
 384:	80 e4       	ldi	r24, 0x40	; 64
 386:	94 e0       	ldi	r25, 0x04	; 4
 388:	20 e4       	ldi	r18, 0x40	; 64
 38a:	34 e0       	ldi	r19, 0x04	; 4
 38c:	f9 01       	movw	r30, r18
 38e:	20 89       	ldd	r18, Z+16	; 0x10
 390:	28 60       	ori	r18, 0x08	; 8
 392:	fc 01       	movw	r30, r24
 394:	20 8b       	std	Z+16, r18	; 0x10
    BITMASK_CLEAR(BU3_PT.DIR, BU3_BM);
 396:	80 e2       	ldi	r24, 0x20	; 32
 398:	94 e0       	ldi	r25, 0x04	; 4
 39a:	20 e2       	ldi	r18, 0x20	; 32
 39c:	34 e0       	ldi	r19, 0x04	; 4
 39e:	f9 01       	movw	r30, r18
 3a0:	20 81       	ld	r18, Z
 3a2:	2f 7e       	andi	r18, 0xEF	; 239
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
    BIT_SET(BU3_PT.PIN4CTRL, PORT_PULLUPEN_bp); //Button3 PB4
 3a8:	80 e2       	ldi	r24, 0x20	; 32
 3aa:	94 e0       	ldi	r25, 0x04	; 4
 3ac:	20 e2       	ldi	r18, 0x20	; 32
 3ae:	34 e0       	ldi	r19, 0x04	; 4
 3b0:	f9 01       	movw	r30, r18
 3b2:	24 89       	ldd	r18, Z+20	; 0x14
 3b4:	28 60       	ori	r18, 0x08	; 8
 3b6:	fc 01       	movw	r30, r24
 3b8:	24 8b       	std	Z+20, r18	; 0x14
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	a0 e8       	ldi	r26, 0x80	; 128
 3c0:	bf e3       	ldi	r27, 0x3F	; 63
 3c2:	8b 83       	std	Y+3, r24	; 0x03
 3c4:	9c 83       	std	Y+4, r25	; 0x04
 3c6:	ad 83       	std	Y+5, r26	; 0x05
 3c8:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e4       	ldi	r19, 0x40	; 64
 3ce:	4c e9       	ldi	r20, 0x9C	; 156
 3d0:	55 e4       	ldi	r21, 0x45	; 69
 3d2:	6b 81       	ldd	r22, Y+3	; 0x03
 3d4:	7c 81       	ldd	r23, Y+4	; 0x04
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	9e 81       	ldd	r25, Y+6	; 0x06
 3da:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__mulsf3>
 3de:	dc 01       	movw	r26, r24
 3e0:	cb 01       	movw	r24, r22
 3e2:	8f 83       	std	Y+7, r24	; 0x07
 3e4:	98 87       	std	Y+8, r25	; 0x08
 3e6:	a9 87       	std	Y+9, r26	; 0x09
 3e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	40 e8       	ldi	r20, 0x80	; 128
 3f0:	5f e3       	ldi	r21, 0x3F	; 63
 3f2:	6f 81       	ldd	r22, Y+7	; 0x07
 3f4:	78 85       	ldd	r23, Y+8	; 0x08
 3f6:	89 85       	ldd	r24, Y+9	; 0x09
 3f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 3fa:	0e 94 4c 03 	call	0x698	; 0x698 <__cmpsf2>
 3fe:	88 23       	and	r24, r24
 400:	2c f4       	brge	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		__ticks = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	8b 87       	std	Y+11, r24	; 0x0b
 408:	9c 87       	std	Y+12, r25	; 0x0c
 40a:	3f c0       	rjmp	.+126    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
	else if (__tmp > 65535)
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	3f ef       	ldi	r19, 0xFF	; 255
 410:	4f e7       	ldi	r20, 0x7F	; 127
 412:	57 e4       	ldi	r21, 0x47	; 71
 414:	6f 81       	ldd	r22, Y+7	; 0x07
 416:	78 85       	ldd	r23, Y+8	; 0x08
 418:	89 85       	ldd	r24, Y+9	; 0x09
 41a:	9a 85       	ldd	r25, Y+10	; 0x0a
 41c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
 420:	18 16       	cp	r1, r24
 422:	4c f5       	brge	.+82     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	40 e2       	ldi	r20, 0x20	; 32
 42a:	51 e4       	ldi	r21, 0x41	; 65
 42c:	6b 81       	ldd	r22, Y+3	; 0x03
 42e:	7c 81       	ldd	r23, Y+4	; 0x04
 430:	8d 81       	ldd	r24, Y+5	; 0x05
 432:	9e 81       	ldd	r25, Y+6	; 0x06
 434:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__mulsf3>
 438:	dc 01       	movw	r26, r24
 43a:	cb 01       	movw	r24, r22
 43c:	bc 01       	movw	r22, r24
 43e:	cd 01       	movw	r24, r26
 440:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fixunssfsi>
 444:	dc 01       	movw	r26, r24
 446:	cb 01       	movw	r24, r22
 448:	8b 87       	std	Y+11, r24	; 0x0b
 44a:	9c 87       	std	Y+12, r25	; 0x0c
 44c:	0f c0       	rjmp	.+30     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 44e:	84 ef       	ldi	r24, 0xF4	; 244
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	8d 87       	std	Y+13, r24	; 0x0d
 454:	9e 87       	std	Y+14, r25	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 456:	8d 85       	ldd	r24, Y+13	; 0x0d
 458:	9e 85       	ldd	r25, Y+14	; 0x0e
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45e:	8d 87       	std	Y+13, r24	; 0x0d
 460:	9e 87       	std	Y+14, r25	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 462:	8b 85       	ldd	r24, Y+11	; 0x0b
 464:	9c 85       	ldd	r25, Y+12	; 0x0c
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	8b 87       	std	Y+11, r24	; 0x0b
 46a:	9c 87       	std	Y+12, r25	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 46c:	8b 85       	ldd	r24, Y+11	; 0x0b
 46e:	9c 85       	ldd	r25, Y+12	; 0x0c
 470:	89 2b       	or	r24, r25
 472:	69 f7       	brne	.-38     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
    _delay_ms(1);
 474:	14 c0       	rjmp	.+40     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 476:	6f 81       	ldd	r22, Y+7	; 0x07
 478:	78 85       	ldd	r23, Y+8	; 0x08
 47a:	89 85       	ldd	r24, Y+9	; 0x09
 47c:	9a 85       	ldd	r25, Y+10	; 0x0a
 47e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fixunssfsi>
 482:	dc 01       	movw	r26, r24
 484:	cb 01       	movw	r24, r22
 486:	8b 87       	std	Y+11, r24	; 0x0b
 488:	9c 87       	std	Y+12, r25	; 0x0c
 48a:	8b 85       	ldd	r24, Y+11	; 0x0b
 48c:	9c 85       	ldd	r25, Y+12	; 0x0c
 48e:	8f 87       	std	Y+15, r24	; 0x0f
 490:	98 8b       	std	Y+16, r25	; 0x10
 492:	8f 85       	ldd	r24, Y+15	; 0x0f
 494:	98 89       	ldd	r25, Y+16	; 0x10
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 49a:	8f 87       	std	Y+15, r24	; 0x0f
 49c:	98 8b       	std	Y+16, r25	; 0x10
 49e:	00 00       	nop
 4a0:	60 96       	adiw	r28, 0x10	; 16
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <time_t0Init>:
	is used to divide the color mixture. The more often it is execudted in one period,the higher is the color variation.
	writing a top value to .. .PER gives the period
	the clock is divided by 256 so that interrupt is executed every 256 clk cycle
*/ 

void time_t0Init(){
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
	TCA0.SINGLE.PER=1;//255;//&0xFF;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	9a e0       	ldi	r25, 0x0A	; 10
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	fc 01       	movw	r30, r24
 4be:	26 a3       	std	Z+38, r18	; 0x26
 4c0:	37 a3       	std	Z+39, r19	; 0x27
	//TCA0.SINGLE.PERH=(255>>8)&0xFF;
	TCA0.SINGLE.INTCTRL|=TCA_SINGLE_OVF_bm; //enable counter intterrupt on overflow
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	9a e0       	ldi	r25, 0x0A	; 10
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	3a e0       	ldi	r19, 0x0A	; 10
 4ca:	f9 01       	movw	r30, r18
 4cc:	22 85       	ldd	r18, Z+10	; 0x0a
 4ce:	21 60       	ori	r18, 0x01	; 1
 4d0:	fc 01       	movw	r30, r24
 4d2:	22 87       	std	Z+10, r18	; 0x0a
	TCA0.SINGLE.CTRLA|=TCA_SINGLE_CLKSEL_DIV256_gc|TCA_SINGLE_ENABLE_bm;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	9a e0       	ldi	r25, 0x0A	; 10
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	3a e0       	ldi	r19, 0x0A	; 10
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	2d 60       	ori	r18, 0x0D	; 13
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
}
 4e6:	00 00       	nop
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <time_t1Init>:
	timerB is used to segment the main loop
	on every timer event the counter is updated. On every new count the main loop is updated
*/


void time_t1Init(){
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
	TCB0.CCMP=200;//8;
 4f6:	80 e8       	ldi	r24, 0x80	; 128
 4f8:	9a e0       	ldi	r25, 0x0A	; 10
 4fa:	28 ec       	ldi	r18, 0xC8	; 200
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	fc 01       	movw	r30, r24
 500:	24 87       	std	Z+12, r18	; 0x0c
 502:	35 87       	std	Z+13, r19	; 0x0d
	//TCA0.SINGLE.PERH=(255>>8)&0xFF;
	TCB0.INTCTRL|=TCB_CAPT_bm; //enable counter intterrupt on overflow
 504:	80 e8       	ldi	r24, 0x80	; 128
 506:	9a e0       	ldi	r25, 0x0A	; 10
 508:	20 e8       	ldi	r18, 0x80	; 128
 50a:	3a e0       	ldi	r19, 0x0A	; 10
 50c:	f9 01       	movw	r30, r18
 50e:	25 81       	ldd	r18, Z+5	; 0x05
 510:	21 60       	ori	r18, 0x01	; 1
 512:	fc 01       	movw	r30, r24
 514:	25 83       	std	Z+5, r18	; 0x05
	TCB0.CTRLA|=TCB_CLKSEL_TCA0_gc|TCB_ENABLE_bm;
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	9a e0       	ldi	r25, 0x0A	; 10
 51a:	20 e8       	ldi	r18, 0x80	; 128
 51c:	3a e0       	ldi	r19, 0x0A	; 10
 51e:	f9 01       	movw	r30, r18
 520:	20 81       	ld	r18, Z
 522:	25 60       	ori	r18, 0x05	; 5
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18
 528:	00 00       	nop
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <__vector_8>:
volatile uint8_t counterNew = 0;
uint16_t secondsCounter = 0;
//LED Shift counter
//clock cycle 3ms/255

ISR(TCA0_OVF_vect) {
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
    TCA0.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm; //clear interrupt flag
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	9a e0       	ldi	r25, 0x0A	; 10
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	3a e0       	ldi	r19, 0x0A	; 10
 558:	f9 01       	movw	r30, r18
 55a:	23 85       	ldd	r18, Z+11	; 0x0b
 55c:	21 60       	ori	r18, 0x01	; 1
 55e:	fc 01       	movw	r30, r24
 560:	23 87       	std	Z+11, r18	; 0x0b
    // ledEvent rgbEvent = led_getNextEvent();
    // TCA0.SINGLE.PER = rgbEvent.time;
    // led_shiftSend(rgbEvent.shiftVal);
}
 562:	00 00       	nop
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <__vector_13>:
//100us

ISR(TCB0_INT_vect) {
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	ef 93       	push	r30
 596:	ff 93       	push	r31
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
    TCB0.INTFLAGS |= TCB_CAPT_bm;
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	9a e0       	ldi	r25, 0x0A	; 10
 5a4:	20 e8       	ldi	r18, 0x80	; 128
 5a6:	3a e0       	ldi	r19, 0x0A	; 10
 5a8:	f9 01       	movw	r30, r18
 5aa:	26 81       	ldd	r18, Z+6	; 0x06
 5ac:	21 60       	ori	r18, 0x01	; 1
 5ae:	fc 01       	movw	r30, r24
 5b0:	26 83       	std	Z+6, r18	; 0x06
    counterNew++;
 5b2:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <counterNew>
 5b6:	8f 5f       	subi	r24, 0xFF	; 255
 5b8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <counterNew>
    counterNew %= NUM_CASES;
 5bc:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <counterNew>
 5c0:	81 70       	andi	r24, 0x01	; 1
 5c2:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <counterNew>
}
 5c6:	00 00       	nop
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <main>:
uint8_t tButStates = 0;

int main(void) {
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	1f 92       	push	r1
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
    ccp_write_io((void *) & (CLKCTRL.MCLKCTRLB), 0); //protected write to disable prescaler of CPU clock
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	81 e6       	ldi	r24, 0x61	; 97
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 67 04 	call	0x8ce	; 0x8ce <ccp_write_io>
    BITMASK_SET(PORTB.DIR, PIN1_bm | PIN0_bm); //PB1 and PB0 as output
 5f8:	80 e2       	ldi	r24, 0x20	; 32
 5fa:	94 e0       	ldi	r25, 0x04	; 4
 5fc:	20 e2       	ldi	r18, 0x20	; 32
 5fe:	34 e0       	ldi	r19, 0x04	; 4
 600:	f9 01       	movw	r30, r18
 602:	20 81       	ld	r18, Z
 604:	23 60       	ori	r18, 0x03	; 3
 606:	fc 01       	movw	r30, r24
 608:	20 83       	st	Z, r18
    uint8_t tog = 0;
 60a:	19 82       	std	Y+1, r1	; 0x01

    //debug_init();
    time_t0Init();
 60c:	0e 94 56 02 	call	0x4ac	; 0x4ac <time_t0Init>
    time_t1Init();
 610:	0e 94 77 02 	call	0x4ee	; 0x4ee <time_t1Init>
    //i2c_init();
    //led_init();
    but_init();
 614:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <but_init>
    //adc_init();
    //enc_init();
    sei();
 618:	78 94       	sei
    while (1) {
        if (counter != counterNew) {
 61a:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <counter>
 61e:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <counterNew>
 622:	98 17       	cp	r25, r24
 624:	d1 f3       	breq	.-12     	; 0x61a <main+0x36>
            counter = counterNew;
 626:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <counterNew>
 62a:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <counter>
            if (tog == 1) {
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	59 f4       	brne	.+22     	; 0x64a <main+0x66>
                tog = 0;
 634:	19 82       	std	Y+1, r1	; 0x01
                BITMASK_SET(PORTB.OUT, PIN1_bm | PIN0_bm); //PB1 and PB0 as output
 636:	80 e2       	ldi	r24, 0x20	; 32
 638:	94 e0       	ldi	r25, 0x04	; 4
 63a:	20 e2       	ldi	r18, 0x20	; 32
 63c:	34 e0       	ldi	r19, 0x04	; 4
 63e:	f9 01       	movw	r30, r18
 640:	24 81       	ldd	r18, Z+4	; 0x04
 642:	23 60       	ori	r18, 0x03	; 3
 644:	fc 01       	movw	r30, r24
 646:	24 83       	std	Z+4, r18	; 0x04
 648:	0b c0       	rjmp	.+22     	; 0x660 <main+0x7c>
            } else {
                tog = 1;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	89 83       	std	Y+1, r24	; 0x01
                BITMASK_CLEAR(PORTB.OUT, PIN1_bm | PIN0_bm); //PB1 and PB0 as output
 64e:	80 e2       	ldi	r24, 0x20	; 32
 650:	94 e0       	ldi	r25, 0x04	; 4
 652:	20 e2       	ldi	r18, 0x20	; 32
 654:	34 e0       	ldi	r19, 0x04	; 4
 656:	f9 01       	movw	r30, r18
 658:	24 81       	ldd	r18, Z+4	; 0x04
 65a:	2c 7f       	andi	r18, 0xFC	; 252
 65c:	fc 01       	movw	r30, r24
 65e:	24 83       	std	Z+4, r18	; 0x04
            }
            switch (counter) {
 660:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <counter>
 664:	88 2f       	mov	r24, r24
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	19 f0       	breq	.+6      	; 0x672 <main+0x8e>
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	21 f0       	breq	.+8      	; 0x678 <main+0x94>
 670:	12 c0       	rjmp	.+36     	; 0x696 <main+0xb2>
                case 0:
                    but_updateStates();
 672:	0e 94 64 00 	call	0xc8	; 0xc8 <but_updateStates>
                    break;
 676:	0f c0       	rjmp	.+30     	; 0x696 <main+0xb2>
                case 1:
                    tButStates = but_getStates();
 678:	0e 94 5b 00 	call	0xb6	; 0xb6 <but_getStates>
 67c:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <tButStates>
                    if (tButStates != butStates) {
 680:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <tButStates>
 684:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <butStates>
 688:	98 17       	cp	r25, r24
 68a:	21 f0       	breq	.+8      	; 0x694 <main+0xb0>
                                 ledStates[i]++;
                                 ledStates[i] %= 4;
                                 led_updateRGB(i, STATES[ledStates[i]], (ledStates[i] == sOFF) ? vOFF : vON);
                             }
                         }*/
                        butStates = tButStates;
 68c:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <tButStates>
 690:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <butStates>
                    }
                    break;
 694:	00 00       	nop
            }
        }


        //_delay_ms(500);		  // delay 1/2 second
    }
 696:	c1 cf       	rjmp	.-126    	; 0x61a <main+0x36>

00000698 <__cmpsf2>:
 698:	0e 94 80 03 	call	0x700	; 0x700 <__fp_cmp>
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <__cmpsf2+0x8>
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret

000006a2 <__fixunssfsi>:
 6a2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__fp_splitA>
 6a6:	88 f0       	brcs	.+34     	; 0x6ca <__fixunssfsi+0x28>
 6a8:	9f 57       	subi	r25, 0x7F	; 127
 6aa:	98 f0       	brcs	.+38     	; 0x6d2 <__fixunssfsi+0x30>
 6ac:	b9 2f       	mov	r27, r25
 6ae:	99 27       	eor	r25, r25
 6b0:	b7 51       	subi	r27, 0x17	; 23
 6b2:	b0 f0       	brcs	.+44     	; 0x6e0 <__fixunssfsi+0x3e>
 6b4:	e1 f0       	breq	.+56     	; 0x6ee <__fixunssfsi+0x4c>
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	88 1f       	adc	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	1a f0       	brmi	.+6      	; 0x6c6 <__fixunssfsi+0x24>
 6c0:	ba 95       	dec	r27
 6c2:	c9 f7       	brne	.-14     	; 0x6b6 <__fixunssfsi+0x14>
 6c4:	14 c0       	rjmp	.+40     	; 0x6ee <__fixunssfsi+0x4c>
 6c6:	b1 30       	cpi	r27, 0x01	; 1
 6c8:	91 f0       	breq	.+36     	; 0x6ee <__fixunssfsi+0x4c>
 6ca:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_zero>
 6ce:	b1 e0       	ldi	r27, 0x01	; 1
 6d0:	08 95       	ret
 6d2:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_zero>
 6d6:	67 2f       	mov	r22, r23
 6d8:	78 2f       	mov	r23, r24
 6da:	88 27       	eor	r24, r24
 6dc:	b8 5f       	subi	r27, 0xF8	; 248
 6de:	39 f0       	breq	.+14     	; 0x6ee <__fixunssfsi+0x4c>
 6e0:	b9 3f       	cpi	r27, 0xF9	; 249
 6e2:	cc f3       	brlt	.-14     	; 0x6d6 <__fixunssfsi+0x34>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b3 95       	inc	r27
 6ec:	d9 f7       	brne	.-10     	; 0x6e4 <__fixunssfsi+0x42>
 6ee:	3e f4       	brtc	.+14     	; 0x6fe <__fixunssfsi+0x5c>
 6f0:	90 95       	com	r25
 6f2:	80 95       	com	r24
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <__fp_cmp>:
 700:	99 0f       	add	r25, r25
 702:	00 08       	sbc	r0, r0
 704:	55 0f       	add	r21, r21
 706:	aa 0b       	sbc	r26, r26
 708:	e0 e8       	ldi	r30, 0x80	; 128
 70a:	fe ef       	ldi	r31, 0xFE	; 254
 70c:	16 16       	cp	r1, r22
 70e:	17 06       	cpc	r1, r23
 710:	e8 07       	cpc	r30, r24
 712:	f9 07       	cpc	r31, r25
 714:	c0 f0       	brcs	.+48     	; 0x746 <__fp_cmp+0x46>
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	e4 07       	cpc	r30, r20
 71c:	f5 07       	cpc	r31, r21
 71e:	98 f0       	brcs	.+38     	; 0x746 <__fp_cmp+0x46>
 720:	62 1b       	sub	r22, r18
 722:	73 0b       	sbc	r23, r19
 724:	84 0b       	sbc	r24, r20
 726:	95 0b       	sbc	r25, r21
 728:	39 f4       	brne	.+14     	; 0x738 <__fp_cmp+0x38>
 72a:	0a 26       	eor	r0, r26
 72c:	61 f0       	breq	.+24     	; 0x746 <__fp_cmp+0x46>
 72e:	23 2b       	or	r18, r19
 730:	24 2b       	or	r18, r20
 732:	25 2b       	or	r18, r21
 734:	21 f4       	brne	.+8      	; 0x73e <__fp_cmp+0x3e>
 736:	08 95       	ret
 738:	0a 26       	eor	r0, r26
 73a:	09 f4       	brne	.+2      	; 0x73e <__fp_cmp+0x3e>
 73c:	a1 40       	sbci	r26, 0x01	; 1
 73e:	a6 95       	lsr	r26
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	81 1d       	adc	r24, r1
 744:	81 1d       	adc	r24, r1
 746:	08 95       	ret

00000748 <__fp_inf>:
 748:	97 f9       	bld	r25, 7
 74a:	9f 67       	ori	r25, 0x7F	; 127
 74c:	80 e8       	ldi	r24, 0x80	; 128
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	08 95       	ret

00000754 <__fp_nan>:
 754:	9f ef       	ldi	r25, 0xFF	; 255
 756:	80 ec       	ldi	r24, 0xC0	; 192
 758:	08 95       	ret

0000075a <__fp_pscA>:
 75a:	00 24       	eor	r0, r0
 75c:	0a 94       	dec	r0
 75e:	16 16       	cp	r1, r22
 760:	17 06       	cpc	r1, r23
 762:	18 06       	cpc	r1, r24
 764:	09 06       	cpc	r0, r25
 766:	08 95       	ret

00000768 <__fp_pscB>:
 768:	00 24       	eor	r0, r0
 76a:	0a 94       	dec	r0
 76c:	12 16       	cp	r1, r18
 76e:	13 06       	cpc	r1, r19
 770:	14 06       	cpc	r1, r20
 772:	05 06       	cpc	r0, r21
 774:	08 95       	ret

00000776 <__fp_round>:
 776:	09 2e       	mov	r0, r25
 778:	03 94       	inc	r0
 77a:	00 0c       	add	r0, r0
 77c:	11 f4       	brne	.+4      	; 0x782 <__fp_round+0xc>
 77e:	88 23       	and	r24, r24
 780:	52 f0       	brmi	.+20     	; 0x796 <__fp_round+0x20>
 782:	bb 0f       	add	r27, r27
 784:	40 f4       	brcc	.+16     	; 0x796 <__fp_round+0x20>
 786:	bf 2b       	or	r27, r31
 788:	11 f4       	brne	.+4      	; 0x78e <__fp_round+0x18>
 78a:	60 ff       	sbrs	r22, 0
 78c:	04 c0       	rjmp	.+8      	; 0x796 <__fp_round+0x20>
 78e:	6f 5f       	subi	r22, 0xFF	; 255
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	08 95       	ret

00000798 <__fp_split3>:
 798:	57 fd       	sbrc	r21, 7
 79a:	90 58       	subi	r25, 0x80	; 128
 79c:	44 0f       	add	r20, r20
 79e:	55 1f       	adc	r21, r21
 7a0:	59 f0       	breq	.+22     	; 0x7b8 <__fp_splitA+0x10>
 7a2:	5f 3f       	cpi	r21, 0xFF	; 255
 7a4:	71 f0       	breq	.+28     	; 0x7c2 <__fp_splitA+0x1a>
 7a6:	47 95       	ror	r20

000007a8 <__fp_splitA>:
 7a8:	88 0f       	add	r24, r24
 7aa:	97 fb       	bst	r25, 7
 7ac:	99 1f       	adc	r25, r25
 7ae:	61 f0       	breq	.+24     	; 0x7c8 <__fp_splitA+0x20>
 7b0:	9f 3f       	cpi	r25, 0xFF	; 255
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <__fp_splitA+0x2a>
 7b4:	87 95       	ror	r24
 7b6:	08 95       	ret
 7b8:	12 16       	cp	r1, r18
 7ba:	13 06       	cpc	r1, r19
 7bc:	14 06       	cpc	r1, r20
 7be:	55 1f       	adc	r21, r21
 7c0:	f2 cf       	rjmp	.-28     	; 0x7a6 <__fp_split3+0xe>
 7c2:	46 95       	lsr	r20
 7c4:	f1 df       	rcall	.-30     	; 0x7a8 <__fp_splitA>
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <__fp_splitA+0x30>
 7c8:	16 16       	cp	r1, r22
 7ca:	17 06       	cpc	r1, r23
 7cc:	18 06       	cpc	r1, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	f1 cf       	rjmp	.-30     	; 0x7b4 <__fp_splitA+0xc>
 7d2:	86 95       	lsr	r24
 7d4:	71 05       	cpc	r23, r1
 7d6:	61 05       	cpc	r22, r1
 7d8:	08 94       	sec
 7da:	08 95       	ret

000007dc <__fp_zero>:
 7dc:	e8 94       	clt

000007de <__fp_szero>:
 7de:	bb 27       	eor	r27, r27
 7e0:	66 27       	eor	r22, r22
 7e2:	77 27       	eor	r23, r23
 7e4:	cb 01       	movw	r24, r22
 7e6:	97 f9       	bld	r25, 7
 7e8:	08 95       	ret

000007ea <__gesf2>:
 7ea:	0e 94 80 03 	call	0x700	; 0x700 <__fp_cmp>
 7ee:	08 f4       	brcc	.+2      	; 0x7f2 <__gesf2+0x8>
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__mulsf3>:
 7f4:	0e 94 0d 04 	call	0x81a	; 0x81a <__mulsf3x>
 7f8:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_round>
 7fc:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_pscA>
 800:	38 f0       	brcs	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 802:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_pscB>
 806:	20 f0       	brcs	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 808:	95 23       	and	r25, r21
 80a:	11 f0       	breq	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_inf>
 810:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_nan>
 814:	11 24       	eor	r1, r1
 816:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_szero>

0000081a <__mulsf3x>:
 81a:	0e 94 cc 03 	call	0x798	; 0x798 <__fp_split3>
 81e:	70 f3       	brcs	.-36     	; 0x7fc <__mulsf3+0x8>

00000820 <__mulsf3_pse>:
 820:	95 9f       	mul	r25, r21
 822:	c1 f3       	breq	.-16     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 824:	95 0f       	add	r25, r21
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	55 1f       	adc	r21, r21
 82a:	62 9f       	mul	r22, r18
 82c:	f0 01       	movw	r30, r0
 82e:	72 9f       	mul	r23, r18
 830:	bb 27       	eor	r27, r27
 832:	f0 0d       	add	r31, r0
 834:	b1 1d       	adc	r27, r1
 836:	63 9f       	mul	r22, r19
 838:	aa 27       	eor	r26, r26
 83a:	f0 0d       	add	r31, r0
 83c:	b1 1d       	adc	r27, r1
 83e:	aa 1f       	adc	r26, r26
 840:	64 9f       	mul	r22, r20
 842:	66 27       	eor	r22, r22
 844:	b0 0d       	add	r27, r0
 846:	a1 1d       	adc	r26, r1
 848:	66 1f       	adc	r22, r22
 84a:	82 9f       	mul	r24, r18
 84c:	22 27       	eor	r18, r18
 84e:	b0 0d       	add	r27, r0
 850:	a1 1d       	adc	r26, r1
 852:	62 1f       	adc	r22, r18
 854:	73 9f       	mul	r23, r19
 856:	b0 0d       	add	r27, r0
 858:	a1 1d       	adc	r26, r1
 85a:	62 1f       	adc	r22, r18
 85c:	83 9f       	mul	r24, r19
 85e:	a0 0d       	add	r26, r0
 860:	61 1d       	adc	r22, r1
 862:	22 1f       	adc	r18, r18
 864:	74 9f       	mul	r23, r20
 866:	33 27       	eor	r19, r19
 868:	a0 0d       	add	r26, r0
 86a:	61 1d       	adc	r22, r1
 86c:	23 1f       	adc	r18, r19
 86e:	84 9f       	mul	r24, r20
 870:	60 0d       	add	r22, r0
 872:	21 1d       	adc	r18, r1
 874:	82 2f       	mov	r24, r18
 876:	76 2f       	mov	r23, r22
 878:	6a 2f       	mov	r22, r26
 87a:	11 24       	eor	r1, r1
 87c:	9f 57       	subi	r25, 0x7F	; 127
 87e:	50 40       	sbci	r21, 0x00	; 0
 880:	9a f0       	brmi	.+38     	; 0x8a8 <__mulsf3_pse+0x88>
 882:	f1 f0       	breq	.+60     	; 0x8c0 <__mulsf3_pse+0xa0>
 884:	88 23       	and	r24, r24
 886:	4a f0       	brmi	.+18     	; 0x89a <__mulsf3_pse+0x7a>
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	bb 1f       	adc	r27, r27
 88e:	66 1f       	adc	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	91 50       	subi	r25, 0x01	; 1
 896:	50 40       	sbci	r21, 0x00	; 0
 898:	a9 f7       	brne	.-22     	; 0x884 <__mulsf3_pse+0x64>
 89a:	9e 3f       	cpi	r25, 0xFE	; 254
 89c:	51 05       	cpc	r21, r1
 89e:	80 f0       	brcs	.+32     	; 0x8c0 <__mulsf3_pse+0xa0>
 8a0:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_inf>
 8a4:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_szero>
 8a8:	5f 3f       	cpi	r21, 0xFF	; 255
 8aa:	e4 f3       	brlt	.-8      	; 0x8a4 <__mulsf3_pse+0x84>
 8ac:	98 3e       	cpi	r25, 0xE8	; 232
 8ae:	d4 f3       	brlt	.-12     	; 0x8a4 <__mulsf3_pse+0x84>
 8b0:	86 95       	lsr	r24
 8b2:	77 95       	ror	r23
 8b4:	67 95       	ror	r22
 8b6:	b7 95       	ror	r27
 8b8:	f7 95       	ror	r31
 8ba:	e7 95       	ror	r30
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	c1 f7       	brne	.-16     	; 0x8b0 <__mulsf3_pse+0x90>
 8c0:	fe 2b       	or	r31, r30
 8c2:	88 0f       	add	r24, r24
 8c4:	91 1d       	adc	r25, r1
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret

000008ce <ccp_write_io>:
 8ce:	dc 01       	movw	r26, r24
 8d0:	28 ed       	ldi	r18, 0xD8	; 216
 8d2:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 8d6:	6c 93       	st	X, r22
 8d8:	08 95       	ret

000008da <_exit>:
 8da:	f8 94       	cli

000008dc <__stop_program>:
 8dc:	ff cf       	rjmp	.-2      	; 0x8dc <__stop_program>
